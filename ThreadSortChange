package com.langsin.juc;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

//ABC ABC ..轮询20次
public class ThreadSortChange {	
	
	private static AlterThreadABC abc = new AlterThreadABC();
	public static void main(String[] args) {
		new Thread(new Runnable() {
			@Override
			public void run() {
				for (int i = 0; i <= 20; i++) {
					abc.loopA(i);
				}
			}
		},"A").start();
		
		new Thread(new Runnable() {
			@Override
			public void run() {
				for (int i = 0; i <= 20; i++) {
					abc.loopB(i);
				}
			}
		},"B").start();
		
		new Thread(new Runnable() {
			@Override
			public void run() {
				for (int i = 0; i <= 20; i++) {
					abc.loopC(i);
				}
			}
		},"C").start();
	}

}

class AlterThreadABC {
	private int number = 1;
	private ReentrantLock lock = new ReentrantLock();
	private Condition con1 = lock.newCondition();
	private Condition con2 = lock.newCondition();
	private Condition con3 = lock.newCondition();

	public void loopA(int total) {
		lock.lock();
		if (number != 1) {
			try {
				con1.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		try {
			for (int i = 0; i < 1; i++) {
				System.out.println("A          "+total);
			}
			number = 2;
			con2.signal();
		} finally {
			lock.unlock();
		}

	}

	public void loopB(int total) {
		lock.lock();
		if (number != 2) {
			try {
				con2.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		try {
			for (int i = 0; i < 1; i++) {
				System.out.println("B          "+total);
			}
			number = 3;
			con3.signalAll();
		} finally {
			lock.unlock();
		}

	}

	public void loopC(int total) {	
		lock.lock();
		if (number != 3) {
			try {
				con3.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		try {
			for (int i = 0; i < 1; i++) {
				System.out.println("C          "+total);
			}
			number = 1;
			con1.signal();
		} finally {
			lock.unlock();
		}

	}
}
